[{"heading":"Exploring LLMs, their frameworks, and the development of applications using them.","date":"2025-03-01T05:00:00.000Z","introContent":"A compilation of my understanding of LLM frameworks and how to build RAG applications using them.","keywords":["computer graphics","rasterization","C++"],"type":"implementation","link":"","content":"","toBeDisplayed":true},{"heading":"Fontend Technologies: Exploring, Experimenting, and Implementing","date":"2025-01-01T05:00:00.000Z","introContent":"I have been delving into the world of frontend development lately, and this document serves as a record of everything I have explored. Most of my time experimenting with frontend technologies has been focused on Next.js, React, and Material UI.","keywords":["frontend","TypeScript","JavaScript","React","Next.js","Angular","Material UI"],"type":"implementation","link":"","content":"","toBeDisplayed":true},{"heading":"Exploring Different Programming Languages","date":"2025-01-01T05:00:00.000Z","introContent":"The article is a compilation of my experiments with different programming languages, exploring their peculiarities, functionalities, and differences.","keywords":["C++","Go","TypeScript","JavaScript","Python","Elixir"],"type":"article","link":"","content":"","toBeDisplayed":true},{"heading":"A Structured Framework for Designing Scalable Distributed Systems","date":"2025-01-01T05:00:00.000Z","introContent":"This article presents the structured framework I have developed for addressing fundamental questions in the design of highly available and scalable systems.","keywords":["backend","database"],"type":"article","link":"https://utkarshkhandelwal.substack.com/p/understanding-the-components-of-software?r=rvgvb","content":"","toBeDisplayed":true},{"heading":"Concurrency and Parallelization: Implementations, Explorations, and Insights","date":"2024-11-01T04:00:00.000Z","introContent":"Implemented event loops in both Go and Python to gain insights into how they work.\nOptimization and Implementation of Parallelized Graph Algorithms for Shared Memory Architectures","keywords":["parallelization","C++","OpenMP","HPC","event-loop","single-thread","Go","Python"],"type":"implementation","link":"","content":"Implemented event loops in both Go and Python to gain insights into how they work.\nOptimization and Implementation of Parallelized Graph Algorithms for Shared Memory Architectures\n\nImplemented a framework for parallel graph algorithms on shared memory machines using OpenMP. Optimized the data access pattern, avoiding race conditions, to achieve a speedup of 8x for Bellman-Ford, 7x for Connected Components, and 3x for Breadth-First Search algorithms on a graph with 1 million vertices and 15 million edges.","toBeDisplayed":true},{"heading":"Implementation of Redis","date":"2024-11-01T04:00:00.000Z","introContent":"Implemented an event loop-based Redis server that can parse and read RDB files, read, write, and replicate in-memory storage, and support Redis streams and transactions.","keywords":["Redis","Go","distributed systems"],"type":"implementation","link":"","content":"Implemented an event loop-based Redis server that can parse and read RDB files, read, write, and replicate in-memory storage, and support Redis streams and transactions.","toBeDisplayed":true},{"heading":"Implementation of Git","date":"2024-10-01T04:00:00.000Z","introContent":"Implemented Git interface and plumbing commands to clone a repository from the remote.","keywords":["Git","TypeScript"],"type":"implementation","link":"","content":"Implemented Git interface and plumbing commands to clone a repository from the remote.","toBeDisplayed":true},{"heading":"Implementation of SQLite","date":"2024-10-01T04:00:00.000Z","introContent":"Implemented a version that can read SQLite database files and execute basic SQL queries like SELECT, WHERE, etc., using indexes.","keywords":["SQL","Go","relational database"],"type":"implementation","link":"","content":"Implemented a version that can read SQLite database files and execute basic SQL queries like SELECT, WHERE, etc., using indexes.","toBeDisplayed":true},{"heading":"Analysis and Modeling of Quantitative Financial Data from Equity Markets","date":"2024-08-01T04:00:00.000Z","introContent":"Analyzed trades and quotes data for S&P 500 companies from June 2007 to September 2007 for modeling market impact. Estimated the predictive parameters and conducted statistical hypothesis tests to validate the model's performance.","keywords":["quant","statistics","econometrics","Python"],"type":"article","link":"","content":"Analyzed trades and quotes data for S&P 500 companies from June 2007 to September 2007 for modeling market impact. Estimated the predictive parameters and conducted statistical hypothesis tests to validate the model's performance.","toBeDisplayed":true},{"heading":"Computer Vision: Image Segmentation Techniques â€“ Exploration and Implementation","date":"2022-12-01T05:00:00.000Z","introContent":"Semantic image segmentation of satellite images using U-Net CNN architectures. Experimented with various U-Net models using different encoders to segment satellite images in the Landcover.ai dataset.","keywords":["computer vision","segmentation","PyTorch","CNN"],"type":"implementation","link":"","content":"Semantic image segmentation of satellite images using U-Net CNN architectures. Experimented with various U-Net models using different encoders to segment satellite images in the Landcover.ai dataset.\n\nThe project involved implementing and comparing different U-Net architectures for semantic segmentation of satellite imagery, focusing on the Landcover.ai dataset.","toBeDisplayed":true},{"heading":"Hands-on Implementation of Distributed Systems Protocols","date":"2022-12-01T05:00:00.000Z","introContent":"Implementation of the Chord Protocol-Based Distributed Hash Table for Peer-to-Peer Networks. Implemented a scalable key-value store using the Chord Protocol for decentralized networks. The Chord Protocol simplifies key lookup, node joining, and leaving processes, ensuring consistent behavior.","keywords":["distributed systems","Elixir","Raft","Go","gRPCs"],"type":"implementation","link":"","content":"Implementation of the Chord Protocol-Based Distributed Hash Table for Peer-to-Peer Networks. Implemented a scalable key-value store using the Chord Protocol for decentralized networks. The Chord Protocol simplifies key lookup, node joining, and leaving processes, ensuring consistent behavior. Conducted performance evaluations on fetch times by increasing the key count from 100K to 1.6M on a system with 100 nodes.\n\nImplemented a replicated state machine using Raft, a distributed consensus protocol, to ensure log consistency across replicas in the system. Implemented log replication and leader election to handle node failures and validated it using rigorous testing with simulated node failures.","toBeDisplayed":true},{"heading":"Implementation and analysis of various Monte Carlo sampling algorithms","date":"2022-12-01T05:00:00.000Z","introContent":"Developed parallel algorithms in Python to implement Monte Carlo sampling techniques for estimating statistical quantities. These algorithms included importance sampling, ensemble methods, MCMC schemes, Langevin dynamics, and more.","keywords":["statistics","Python","sampling techniques","mcmc"],"type":"implementation","link":"","content":"Developed parallel algorithms in Python to implement Monte Carlo sampling techniques for estimating statistical quantities. These algorithms included importance sampling, ensemble methods, MCMC schemes, Langevin dynamics, and more.","toBeDisplayed":true},{"heading":"Recommendation Systems: Exploring, Implementing, and Gaining Insights","date":"2022-05-01T04:00:00.000Z","introContent":"Experimented with capturing causal relationships between user actions and recommended items using probabilistic latent factor models, and used that inference to build recommendation systems.","keywords":["machine learning","recommendation systems","PyTorch","Python"],"type":"implementation","link":"","content":"Experimented with capturing causal relationships between user actions and recommended items using probabilistic latent factor models, and used that inference to build recommendation systems.\n\nThe project focused on incorporating causal inference techniques into recommendation systems to better understand and model the relationships between user behaviors and item recommendations.","toBeDisplayed":true},{"heading":"Exploring Computer Graphics: Fundamentals and Hands-on Experiments","date":"2021-12-01T05:00:00.000Z","introContent":"Developed a desktop application featuring a custom rasterization pipeline for real-time, responsive manipulation of 2D graphics (triangles).","keywords":["computer graphics","rasterization","C++"],"type":"implementation","link":"","content":"Developed a desktop application featuring a custom rasterization pipeline for real-time, responsive manipulation of 2D graphics (triangles).","toBeDisplayed":true}]